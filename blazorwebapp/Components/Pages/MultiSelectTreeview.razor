@page "/multi-select-treeview"
@rendermode InteractiveServer

<MudText Style="width: 100%" Typo="Typo.h2" Class="mb-n2">Treeview</MudText>

<MudTreeView T="string">
    <MudTreeViewItem Value="@("oh shit")">
        <MudTreeViewItem Value="@("Installation")" />
    </MudTreeViewItem>
    <MudTreeViewItem Value="@("Components")">
        <MudTreeViewItem Value="@("Avatar")" />
        <MudTreeViewItem Value="@("Button")" />
    </MudTreeViewItem>
</MudTreeView>


<MudDivider />
<MudText Style="width: 100%" Typo="Typo.h2" Class="mb-n2">Selectable Treeview</MudText>

<MudPaper Width="300px" Elevation="0">
    <MudTreeView @bind-SelectedValue="SelectedValue" Hover="true">
        <MudTreeViewItem @bind-Expanded="@folderOneExpanded" Value="@(".vscode")" Icon="@(folderOneExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)">
            <MudTreeViewItem Value="@("launch.json")" Icon="@Icons.Custom.FileFormats.FileCode" />
            <MudTreeViewItem Value="@("tasks.json")" Icon="@Icons.Custom.FileFormats.FileCode" />
        </MudTreeViewItem>
        <MudTreeViewItem @bind-Expanded="@folderTwoExpanded" Value="@("content")" Icon="@(folderTwoExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)">
            <MudTreeViewItem Value="@("logo.png")" Icon="@Icons.Custom.FileFormats.FileImage" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudText Style="width: 100%" Typo="@Typo.subtitle1">Selected item: @SelectedValue</MudText>


<MudDivider />
<MudText Style="width: 100%" Typo="Typo.h2" Class="mb-n2">Multiselect Treeview</MudText>

<MudTreeView MultiSelection="true" @bind-SelectedValues="SelectedValues">
    <MudTreeViewItem Value="@("content")">
        <MudTreeViewItem Value="@("logo.png")" />
    </MudTreeViewItem>
    <MudTreeViewItem Value="@("src")">
        <MudTreeViewItem Value="@("mudblazor.docs")" />
        <MudTreeViewItem Value="@("mudblazor.docs.server")">
            <MudTreeViewItem Value="@("wwwroot")">
                <MudTreeViewItem Value="@("robots.txt")" />
                <MudTreeViewItem Value="@("favicon.ico")" />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeViewItem>
</MudTreeView>

<MudText Style="width: 100%" Typo="Typo.subtitle1" Class="mb-n2">Number of selected items: @(SelectedValues?.Count ?? 0)</MudText> 


<MudDivider />
<MudText Style="width: 100%" Typo="Typo.h2" Class="mb-n2">Custom Checkbox Treeview</MudText>

<MudPaper Width="350px" MaxHeight="500px" Class="overflow-y-auto" Elevation="0">
    <MudTreeView Items="@TreeItems">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                    <MudCheckBox T="bool?" Value="@(context.HasPartialChildSelection() ? null : context.IsChecked)" ValueChanged="@((e) => CheckedChanged(context))"></MudCheckBox>
                    <MudText>@context.Text</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public TreeItemData? Parent { get; set; } = null;

        public string Text { get; set; }

        public bool IsExpanded { get; set; } = false;

        public bool IsChecked { get; set; } = false;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text)
        {
            Text = text;
        }

        public void AddChild(string itemName)
        {
            TreeItemData item = new TreeItemData(itemName);
            item.Parent = this;
            this.TreeItems.Add(item);
        }

        public bool HasPartialChildSelection()
        {
            int iChildrenCheckedCount = (from c in TreeItems where c.IsChecked select c).Count();
            return HasChild && iChildrenCheckedCount > 0 && iChildrenCheckedCount < TreeItems.Count();
        }

    }

    protected void CheckedChanged(TreeItemData item)
    {
        item.IsChecked = !item.IsChecked;
        // checked status on any child items should mirrror this parent item
        if (item.HasChild)
        {
            foreach (TreeItemData child in item.TreeItems)
            {
                child.IsChecked = item.IsChecked;
            }
        }
        // if there's a parent and all children are checked/unchecked, parent should match
        if (item.Parent != null)
        {
            item.Parent.IsChecked = !item.Parent.TreeItems.Any(i => !i.IsChecked);
        }
    }

    protected override void OnInitialized()
    {
        TreeItemData itemFruits = new TreeItemData("Fruits");
        TreeItemData itemVeg = new TreeItemData("Vegetables");
        TreeItemData itemGrains = new TreeItemData("Grains");

        itemFruits.AddChild("Apple");
        itemFruits.AddChild("Banana");
        itemFruits.AddChild("Orange");
        itemFruits.AddChild("Pear");
        itemFruits.AddChild("Pineapple");

        itemGrains.AddChild("Barley");
        itemGrains.AddChild("Oats");
        itemGrains.AddChild("Rice");

        itemVeg.AddChild("Carrot");
        itemVeg.AddChild("Leek");
        itemVeg.AddChild("Onion");
        itemVeg.AddChild("Potato");

        TreeItems.Add(itemFruits);
        TreeItems.Add(itemGrains);
        TreeItems.Add(itemVeg);
    }
}

@code {
    string? SelectedValue { get; set; }
    bool folderOneExpanded;
    bool folderTwoExpanded;

    HashSet<string>? SelectedValues { get; set; }
}
